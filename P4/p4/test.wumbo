/// test struct declaration
struct Point {
	int x;
	int y;
};

/// test whether most recent scope var is used
int val;
void testMostRecentScopeUsage() {
	/// declare a bool var called val. When used, the type should be bool!
	bool val;
	val = true;  /// get (bool) here not (int)
}

/// test whether correct variable types are printed
void testBasicSymType() {
	int x;
	bool y;
	x = 10 + x;
	y = !y;
}

/// test function call args have correct types and correct return type is given
int testReturnAndArgTypes(int a, int b, bool c) {
	int val1;
	int val2;
	bool val3;

	testReturnAndArgTypes(val1, val2, val3);
}

/// test function with no args
void testReturnNoArg() {
	testReturnNoArg();
}

/// test if statement
void testIfStatement() {
	/// test the conditional exp
	bool val;
	int x;
	val = true;
	if (val && true || false) {
		bool x;  /// another x
		bool val;
		x = false;
		val = true;
		x = x || val;
	}
}

/// test if else statement
void testIfElseStatement() {
	/// test the conditional exp
	bool val;
	int x;
	val = true;
	if (val && true || false) {
		bool x;  /// another x
		bool val;
		x = false;
		val = true;
		x = x || val;
	} else {
		bool x;  /// another x
		int val;
		val = 5 + x - x * 10;
		x = val && val || x;
	}
}

/// test while statement scope
void testWhileStatement(bool a, bool b, bool c) {
	while (a && (b || c)) {
		int val;
		val = 0;
		a = (val == 10);
		val++;
	}
}

/// test a function with the same name as a variable inside
int test(int test) {
}

/// test adding a new struct
void testStructGeneral() {
	/// test creating an instance and using it
	struct Point p;
}
