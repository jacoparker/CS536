import java_cup.runtime.*; // defines the Symbol class

// The generated scanner will return a Symbol for each token that it finds.
// A Symbol contains an Object field named value; that field will be of type
// TokenVal, defined below.
//
// A TokenVal object contains the line number on which the token occurs as
// well as the number of the character on that line that starts the token.
// Some tokens (literals and IDs) also include the value of the token.

class TokenVal {
  // fields
    int linenum;
    int charnum;
  // constructor
    TokenVal(int line, int ch) {
        linenum = line;
        charnum = ch;
    }
}

class IntLitTokenVal extends TokenVal {
  // new field: the value of the integer literal
    int intVal;
  // constructor
    IntLitTokenVal(int line, int ch, int val) {
        super(line, ch);
        intVal = val;
    }
}

class IdTokenVal extends TokenVal {
  // new field: the value of the identifier
    String idVal;
  // constructor
    IdTokenVal(int line, int ch, String val) {
        super(line, ch);
    idVal = val;
    }
}

class StrLitTokenVal extends TokenVal {
  // new field: the value of the string literal
    String strVal;
  // constructor
    StrLitTokenVal(int line, int ch, String val) {
        super(line, ch);
        strVal = val;
    }
}

class Helper {
  public static Symbol createNewTokenVal(int val, int line, int length) {
    Symbol s = new Symbol(val, new TokenVal(line, CharNum.num));
    CharNum.num += length;
    return s;
  }
}

// The following class is used to keep track of the character number at which
// the current token starts on its line.
class CharNum {
    static int num=1;
}
%%

DIGIT=        [0-9]
SPACE=        [\040\t]
LETTER=       [a-zA-Z]

%implements java_cup.runtime.Scanner
%function next_token
%type java_cup.runtime.Symbol

%eofval{
return new Symbol(sym.EOF);
%eofval}

%line

%%

"bool"    {Helper.createNewTokenVal(sym.BOOL, yyline+1, yytext().length());}
"int"     {Helper.createNewTokenVal(sym.INT, yyline+1, yytext().length());}

"void"    {
            Symbol s = new Symbol(sym.VOID,
                                  new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return s;
          }

"true"    {
            Symbol s = new Symbol(sym.TRUE,
                                  new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return s;
          }

"false"   {
            Symbol s = new Symbol(sym.FALSE,
                                  new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return s;
          }

"struct"  {
            Symbol s = new Symbol(sym.STRUCT,
                                  new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return s;
          }

"cin"     {
            Symbol s = new Symbol(sym.CIN,
                                  new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return s;
          }

"cout"    {
            Symbol s = new Symbol(sym.COUT,
                                  new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return s;
          }

"if"      {
            Symbol s = new Symbol(sym.IF,
                                  new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return s;
          }

"else"    {
            Symbol s = new Symbol(sym.ELSE,
                                  new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return s;
          }

"while"   {
            Symbol s = new Symbol(sym.WHILE,
                                  new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return s;
          }

"return"  {
            Symbol s = new Symbol(sym.RETURN,
                                  new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return s;
          }

({LETTER}|"_")({LETTER}|{DIGIT}|"_")* {
            String val = yytext();
            Symbol s = new Symbol(sym.ID,
                                  new IdTokenVal(yyline+1, 
                                  CharNum.num,
                                  val));
            CharNum.num += val.length();
            return s;
          }

{DIGIT}+  { // NOTE: the following computation of the integer value does NOT
            //       check for overflow.  This must be modified. TODO
            int val = Integer.parseInt(yytext());
            Symbol s = new Symbol(sym.INTLITERAL,
                             new IntLitTokenVal(yyline+1, CharNum.num, val));
            CharNum.num += yytext().length();
            return s;
          }

\n        { CharNum.num = 1; }

{SPACE}+  { CharNum.num += yytext().length(); }

"+"       { Symbol s = new Symbol(sym.PLUS, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return s;
          }
        
.         { ErrMsg.fatal(yyline+1, CharNum.num,
                         "ignoring illegal character: " + yytext());
            CharNum.num++;
          }

