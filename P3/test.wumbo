/// 1. simple tests for basic declarations
int x;
int y;
bool value;
bool anotherVal;
void func;

/// 2. test struct declaration
struct anID {
	/// test struct body
	bool v2;
	int z;
}

/// 3. test functions - basic tests
int function() {
	/// empty function should be valid
}

bool otherFunction() {
	/// non empty function tests
	int num;

	/// test assignment exp node
	num = 4;

	/// test multiple assignment case
	x = num = y = z;

	/// test the dot operator
	x.num.z.value = 200;
}

/// 4. test the term rules
void testTerms() {
	bool b;

	a = 123;

	str = "literal!";

	b = false;
	b = true;

	exp = (4);

	function();

	result = otherFunction();
}

/// 5. test statements rules
void testStmts() {
	/// post inc
	a++;

	/// post dec
	b--;

	/// read in tests - can only read ids
	cin >> id;
	cin >> id.subId;

	/// write out tests
	cout << id;
	cout << id.subId;
	cout << a = id;
	cout << 12;
	cout << true;
	cout << "literal";
	cout << funcCall();

	/// test if statement cases TODO add more expression tests
	if (true) {
		int a;
		bool b;

		func();
		a = b = funcReturnInt();
		if (false) {   /// nested conditional
			b = false;
			b = funcReturnBool();
		}
	}

	if (funcReturningBool()) {  /// test func as exp in conditional

	}

	/// test if else statement cases TODO same as above
	if (id) {
		x = 1;
		y = function();
	} else {
		x = 2;
		y = false;
		if (function()) {
			x = 3;
		} else {
			x = 4;
		}
	}

	if (true) {
		if (true) {
			x = false;
		} else {
			x = true;
		}
	} else {
		if (false) {
			x = 1;
		} else {
			x = 2;
		}
	}

	/// test empty conditionals
	if (true) {

	} else {
	
	}

	/// test the while loop rule
	while (x) {
		int a;
		int b;
		bool c;
		a = b;
		a = function();
		functionCall();

		/// test nesting loops
		while (true) {
			int d;
			bool f;
			f = false;
			d = 1234;
		}

		repeat (false) {
			if (true) {  /// test nesting the conditionals
				a = 4;
			} else {
				a = 3;
			}

			if (false) {
				repeat (var) {
					var = false;
					var = true;
				}
			}
		}
	}

	/// test empty loop
	while (true) {

	}

	/// test repeat loop rule
	repeat(var) {
		x = 1;
		y = function();
	}

	/// Test return statements
	return functionCall();
	return 45;
	return "return val";
	return;  /// problem - unparse adds a space before the semicolon... oh well.
} 

/// 6. test the exp expansion rules!
void testExpRules() {
	/// test postInc
	a++;
	id.subId++;

	/// test postDec
	a--;
	id.subId--;

	/// test plus nodes
	a = a + b;
	a = a + b + c;

	/// test minus nodes
	a = a - b;
	a = a - b - c;

	/// test times node
	a = a * b;
	a = a * b * c;

	/// test divide nodes
	a = a / b;
	a = a / b / c;

	/// test not node
	b = !false;
	b = !term;
	b = !funcReturningBool();
	/// TODO b = !(a < b);

	/// test and node
	b = true && boolVal;
	b = false && false && false;

	/// test or node
	b = true || boolVal;
	b = false || false || false;

	/// test equals
	if (a == b) {
	}
	b = false == x;

	/// test not equals
	if (a != b) {
	}
	b = false != x;

	/// test less
	if (a < b) {
	}
	b = 4 < x;

	/// test greater
	if (a > b) {
	}
	b = 4 > x;

	/// test lesseq
	if (a <= b) {
	}
	b = 4 <= x;

	/// test greatereq
	if (a >= b) {
	}
	b = 4 >= x;

	/// test minus term
	a = -a;
	b = -5;
}

/// 7. test associativity
void testAssociativityAndPrecedence() {
	a = a + b * c - d / e - f - g * h;
	a = d.subD - 6 * a.b.c == 10;

	a = b - c / d;
	a = c * d / e;
	a = x < 10 && a + b == 10 || x >= 12;

	a = b <= 2;
	a = s != false;
}

/// 8. test arguments of funcs


/// 9. test parentheses in expressions
