/**********************************************************************
 Java CUP specification for a parser for Wumbo programs.
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/*
 * The code below redefines method syntax_error to give better error messages
 * than just "Syntax error".
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).linenum,
                     ((TokenVal)currToken.value).charnum,
                     "Syntax error");
    }
    System.exit(-1);
}
:};


/* Terminals (tokens returned by the scanner). */
terminal                INT;
terminal                BOOL;
terminal                VOID;
terminal TokenVal       TRUE;
terminal TokenVal       FALSE;
terminal                STRUCT;
terminal                CIN;
terminal                COUT;
terminal                IF;
terminal                ELSE;
terminal                WHILE;
terminal		REPEAT;
terminal                RETURN;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal StrLitTokenVal STRINGLITERAL;
terminal                LCURLY;
terminal                RCURLY;
terminal                LPAREN;
terminal                RPAREN;
terminal                SEMICOLON;
terminal                COMMA;
terminal                DOT;
terminal                WRITE;
terminal                READ;
terminal                PLUSPLUS;
terminal                MINUSMINUS;
terminal                PLUS;
terminal                MINUS;
terminal                TIMES;
terminal                DIVIDE;
terminal                NOT;
terminal                AND;
terminal                OR;
terminal                EQUALS;
terminal                NOTEQUALS;
terminal                LESS;
terminal                GREATER;
terminal                LESSEQ;
terminal                GREATEREQ;
terminal                ASSIGN;


/* Non-terminals
 *
 * NOTE: You will need to add more non-terminals to this list as you
 *       add productions to the grammar below.
 */
non terminal ProgramNode      program;
non terminal LinkedList       declList;
non terminal DeclNode         decl;
non terminal VarDeclNode      varDecl;
non terminal TypeNode         type;
non terminal IdNode           id;
non terminal StructDeclNode   strDecl;
non terminal FnDeclNode       fnDecl;
non terminal FormalsListNode  formals;
non terminal FormalsListNode  formalsList;
non terminal FormalDeclNode   formalDecl;
non terminal FnBodyNode       fnBody;
non terminal LinkedList       stmtList;
non terminal StmtNode         stmt;
non terminal AssignNode       assignExp;
non terminal ExpNode          exp;
non terminal ExpNode          loc;
non terminal ExpNode          term;
non terminal CallExpNode      fncall;

/* Precedences
 *
 * NOTE: Add precedence and associativity declarations here.
 * TODO write lots of tests for this stuff!!
 *
 */


start with program;


/* The grammar with actions
 *
 * NOTE: add more grammar rules below.
 *
 */
program         ::= declList: d
                {: RESULT = new ProgramNode(new DeclListNode(d));
                :}
                ;

declList        ::= declList:dl decl:d
                {: dl.addLast(d);
                   RESULT = dl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<DeclNode>();
                :}
                ;

decl            ::= varDecl:v
                {: RESULT = v;
                :}
                | strDecl:sd
                {: RESULT = sd;
                :}
                | fnDecl:fd
                {: RESULT = fd;
                :}
                ;

varDecl         ::= type:t id:i SEMICOLON
                {: RESULT = new VarDeclNode(t, i, VarDeclNode.NOT_STRUCT);
                :}
                ;

strDecl         ::= STRUCT id:i LCURLY declList:d RCURLY
                {: RESULT = new StructDeclNode(i, new DeclListNode(d));
                :}
                ;

fnDecl          ::= type:t id:i formals:f fnBody:fb
                {: RESULT = new FnDeclNode(t, i, f, fb);
                :}
                ;

formals         ::= LPAREN RPAREN
                {: RESULT = new FormalsListNode(new LinkedList<FormalDeclNode>());
                :}
                ;

formalsList     ::= formalDecl:fd
                {:  List<FormalDeclNode> l = new LinkedList<>();
                    l.add(fd);
                    RESULT = new FormalsListNode(l);
                :}
                ;

formalDecl      ::= type:t id:i
                {: RESULT = new FormalDeclNode(t, i);
                :}
                ;

fnBody          ::= LCURLY declList:dl stmtList:sl RCURLY
                {: RESULT = new FnBodyNode(new DeclListNode(dl), new StmtListNode(sl));
                :}
                ;

stmtList        ::= /* epsilon */
                {: RESULT = new LinkedList<StmtNode>();
                :}
                | stmtList:sl stmt:s
                {:  sl.addLast(s);
                    RESULT = sl;
                :}
                ;

stmt            ::= assignExp:ae SEMICOLON
                {: RESULT = new AssignStmtNode(ae);
                :}
                | loc:l PLUSPLUS SEMICOLON
                {: RESULT = new PostIncStmtNode(l);
                :}
                | loc:l MINUSMINUS SEMICOLON
                {: RESULT = new PostDecStmtNode(l);
                :}
                | CIN READ loc:l SEMICOLON
                {: RESULT = new ReadStmtNode(l);
                :}
                | COUT WRITE exp:e SEMICOLON
                {: RESULT = new WriteStmtNode(e);
                :}
                | IF LPAREN exp:e RPAREN LCURLY declList:dl stmtList:sl RCURLY
                {: RESULT = new IfStmtNode(e, new DeclListNode(dl), new StmtListNode(sl));
                :}
                | IF LPAREN exp:e RPAREN LCURLY declList:dl stmtList:sl RCURLY ELSE LCURLY declList:dl2 stmtList:sl2 RCURLY
                {: RESULT = new IfElseStmtNode(e, new DeclListNode(dl),
                    new StmtListNode(sl), new DeclListNode(dl2), new StmtListNode(sl2));
                :}
                | WHILE LPAREN exp:e RPAREN LCURLY declList:dl stmtList:sl RCURLY
                {: RESULT = new WhileStmtNode(e, new DeclListNode(dl), new StmtListNode(sl));
                :}
                |  REPEAT LPAREN exp:e RPAREN LCURLY declList:dl stmtList:sl RCURLY
                {: RESULT = new RepeatStmtNode(e, new DeclListNode(dl), new StmtListNode(sl));
                :}
                |  RETURN exp SEMICOLON
                {: // TODO
                :}
                |  RETURN SEMICOLON
                {: // TODO
                :}
                | fncall:fc SEMICOLON
                {: RESULT = new CallStmtNode(fc);
                :}
                ;

assignExp       ::= loc:l ASSIGN exp:e
                {: RESULT = new AssignNode(l, e);
                :}
                ;

exp             ::= assignExp:ae
                {: RESULT = ae;
                :}
                | term:t
                {: RESULT = t;
                :}
                ;

term            ::= loc:l
                {: RESULT = l;
                :}
                | INTLITERAL:i
                {: RESULT = new IntLitNode(i.linenum, i.charnum, i.intVal);
                :}
                | STRINGLITERAL:s
                {: RESULT = new StringLitNode(s.linenum, s.charnum, s.strVal);
                :}
                | TRUE:t
                {: RESULT = new TrueNode(t.linenum, t.charnum);
                :}
                | FALSE:f
                {: RESULT = new FalseNode(f.linenum, f.charnum);
                :}
                | LPAREN exp:e RPAREN
                {: // TODO
                    RESULT = e; // TEST THIS!!! WHAT DO WE DO HEREEEEEE
                :}
                | fncall:fc
                {: RESULT = fc;
                :}
                ;

fncall          ::= id:i LPAREN RPAREN
                {: RESULT = new CallExpNode(i);
                :}
                ;

type            ::= INT
                {: RESULT = new IntNode();
                :}
                |
                BOOL
                {: RESULT = new BoolNode();
                :}
                |
                VOID
                {: RESULT = new VoidNode();
                :}
                ;

loc             ::= id:i
                {: RESULT = i;
                :}
                | loc:l DOT id:i
                {: RESULT = new DotAccessExpNode(l, i);  // TODO
                :}
                ;

id              ::= ID:i
                {: RESULT = new IdNode(i.linenum, i.charnum, i.idVal);
                :}
                ;
